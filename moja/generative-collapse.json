{
  "id": "generative-collapse",
  "title": "الانهيار التوليدي - من الاحتمالات إلى القرار",
  "description": "آلية نظرية لتحويل الإمكانيات المتعددة إلى اختيار واحد محدد",
  "category": "decision-engine",
  "version": "2.0",

  "scientific_relations": {
    "physics": {
      "concept": "quantum_collapse",
      "similarity": "wave_function_collapse",
      "explanation": "مثل انهيار الدالة الموجية في الكمومي، الاحتمالات المتعددة تنهار لحالة واحدة عند 'القياس'",
      "similarity_score": 0.8
    },
    "computer_science": {
      "concept": "optimization_algorithms",
      "similarity": "constraint_satisfaction",
      "explanation": "العثور على الحل الأمثل من مجموعة كبيرة من الاحتمالات",
      "similarity_score": 0.7
    },
    "information_theory": {
      "concept": "entropy_reduction",
      "similarity": "information_compression",
      "explanation": "تقليل عدم اليقين من حالة عالية الإنتروبيا إلى حالة محددة",
      "similarity_score": 0.9
    },
    "neuroscience": {
      "concept": "neural_competition",
      "similarity": "winner_takes_all",
      "explanation": "شبكات عصبية متنافسة حتى تهيمن واحدة",
      "similarity_score": 0.6
    },
    "game_theory": {
      "concept": "decision_making",
      "similarity": "nash_equilibrium",
      "explanation": "الوصول لنقطة توازن حيث لا يمكن تحسين القرار أكثر",
      "similarity_score": 0.5
    }
  },

  "input_output_spec": {
    "input": {
      "type": "possibilities_array",
      "format": {
        "possibilities": "array[possibility_objects]",
        "context": "decision_context_object",
        "constraints": "constraint_set",
        "urgency_level": "float[0-1]"
      },
      "example": {
        "possibilities": [
          {"option": "A", "confidence": 0.7, "utility": 0.8},
          {"option": "B", "confidence": 0.9, "utility": 0.6}
        ],
        "context": {"time_pressure": 0.3, "stakes": "medium"},
        "constraints": {"budget": 1000, "time": 24},
        "urgency_level": 0.5
      }
    },
    "output": {
      "type": "collapsed_decision",
      "format": {
        "selected_option": "object",
        "confidence_level": "float[0-1]",
        "collapse_reason": "string",
        "alternatives_suppressed": "array",
        "decision_trace": "object"
      }
    },
    "error_states": {
      "no_viable_options": "all possibilities below minimum threshold",
      "analysis_paralysis": "unable to collapse due to equal weights",
      "insufficient_information": "not enough data to make decision"
    }
  },

  "collapse_triggers": {
    "measurement_trigger": {
      "description": "سؤال مباشر أو ضرورة اتخاذ قرار",
      "examples": ["direct_question", "deadline_reached", "external_pressure"],
      "probability": 0.9
    },
    "energy_threshold": {
      "description": "استنزاف الطاقة المعرفية من التفكير المفرط",
      "mechanism": "cognitive_load_overflow",
      "probability": 0.7
    },
    "confidence_convergence": {
      "description": "وصول أحد الخيارات لمستوى ثقة عالي",
      "threshold": 0.8,
      "probability": 0.8
    },
    "emotional_peak": {
      "description": "الوصول لحالة عاطفية تتطلب عمل فوري",
      "mechanism": "emotion_driven_urgency",
      "probability": 0.6
    },
    "external_interrupt": {
      "description": "حدث خارجي يجبر على اتخاذ قرار",
      "examples": ["emergency", "opportunity_window", "social_pressure"],
      "probability": 0.9
    }
  },

  "collapse_mechanisms": {
    "weighted_voting": {
      "description": "كل محاكي يصوت بوزن مختلف",
      "algorithm": "confidence * priority * relevance",
      "speed": "moderate",
      "accuracy": "high"
    },
    "threshold_racing": {
      "description": "أول خيار يتجاوز عتبة معينة يفوز",
      "algorithm": "first_to_threshold(0.8)",
      "speed": "fast",
      "accuracy": "moderate"
    },
    "energy_minimization": {
      "description": "اختيار الخيار الأقل استهلاكاً للطاقة",
      "algorithm": "min(cognitive_cost + emotional_cost)",
      "speed": "fast",
      "accuracy": "varies"
    },
    "satisficing": {
      "description": "اختيار أول خيار 'جيد بما فيه الكفاية'",
      "algorithm": "first_above_minimum_acceptable",
      "speed": "very_fast",
      "accuracy": "acceptable"
    },
    "tournament_selection": {
      "description": "مقارنات ثنائية حتى يبقى فائز واحد",
      "algorithm": "binary_comparison_tree",
      "speed": "slow",
      "accuracy": "very_high"
    }
  },

  "parameters": {
    "collapse_threshold": {
      "type": "float",
      "range": [0.5, 1.0],
      "default": 0.7,
      "description": "الحد الأدنى للثقة المطلوب للانهيار"
    },
    "uncertainty_tolerance": {
      "type": "float",
      "range": [0.0, 1.0],
      "default": 0.3,
      "description": "قدرة النظام على تحمل عدم اليقين"
    },
    "collapse_speed": {
      "type": "enum",
      "values": ["instant", "gradual", "deliberate"],
      "default": "gradual",
      "description": "سرعة عملية الانهيار"
    },
    "regret_minimization": {
      "type": "float",
      "range": [0.0, 1.0],
      "default": 0.6,
      "description": "مدى محاولة تجنب الندم المستقبلي"
    }
  },

  "pseudocode": {
    "collapse_orchestrator": `
      class GenerativeCollapseEngine {
          constructor(config) {
              this.threshold = config.collapseThreshold || 0.7;
              this.uncertaintyTolerance = config.uncertaintyTolerance || 0.3;
              this.collapseHistory = [];
          }
          
          async initiateCollapse(possibilities, context, triggers) {
              let collapseSession = {
                  id: this.generateSessionId(),
                  startTime: Date.now(),
                  inputs: {possibilities, context, triggers},
                  trace: []
              };
              
              try {
                  // تحليل حالة ما قبل الانهيار
                  let preCollapseState = this.analyzePreCollapseState(possibilities);
                  collapseSession.trace.push({step: "pre_analysis", data: preCollapseState});
                  
                  // تحديد آلية الانهيار المناسبة
                  let mechanism = this.selectCollapseMechanism(possibilities, context, triggers);
                  collapseSession.trace.push({step: "mechanism_selection", data: mechanism});
                  
                  // تنفيذ الانهيار
                  let collapsedResult = await this.executeCollapse(possibilities, mechanism, context);
                  collapseSession.trace.push({step: "collapse_execution", data: collapsedResult});
                  
                  // تطبيق الانهيار وتنظيف النظام
                  let finalDecision = this.materializeDecision(collapsedResult, possibilities);
                  collapseSession.trace.push({step: "materialization", data: finalDecision});
                  
                  // حفظ لتعلم الأنماط
                  collapseSession.endTime = Date.now();
                  collapseSession.result = finalDecision;
                  this.collapseHistory.push(collapseSession);
                  
                  return finalDecision;
                  
              } catch (error) {
                  return this.handleCollapseFailure(error, possibilities, context);
              }
          }
          
          selectCollapseMechanism(possibilities, context, triggers) {
              // تحليل السياق لاختيار أفضل آلية
              if (context.urgency > 0.8) {
                  return "threshold_racing";
              } else if (possibilities.length <= 3) {
                  return "tournament_selection";
              } else if (context.complexity > 0.7) {
                  return "weighted_voting";
              } else {
                  return "satisficing";
              }
          }
          
          async executeCollapse(possibilities, mechanism, context) {
              switch (mechanism) {
                  case "weighted_voting":
                      return this.weightedVotingCollapse(possibilities, context);
                  case "threshold_racing":
                      return this.thresholdRacingCollapse(possibilities);
                  case "tournament_selection":
                      return this.tournamentCollapse(possibilities, context);
                  case "satisficing":
                      return this.satisficingCollapse(possibilities, context);
                  default:
                      throw new Error(\`Unknown collapse mechanism: \${mechanism}\`);
              }
          }
          
          weightedVotingCollapse(possibilities, context) {
              let weightedPossibilities = possibilities.map(p => ({
                  ...p,
                  finalWeight: this.calculateFinalWeight(p, context)
              }));
              
              // ترتيب حسب الوزن النهائي
              weightedPossibilities.sort((a, b) => b.finalWeight - a.finalWeight);
              
              // التحقق من وجود فائز واضح
              let winner = weightedPossibilities[0];
              let runnerUp = weightedPossibilities[1];
              
              if (winner.finalWeight - runnerUp.finalWeight > 0.2) {
                  return {
                      selected: winner,
                      confidence: winner.finalWeight,
                      margin: winner.finalWeight - runnerUp.finalWeight,
                      mechanism: "weighted_voting"
                  };
              } else {
                  // انتقال لآلية أخرى في حالة التعادل
                  return this.tournamentCollapse([winner, runnerUp], context);
              }
          }
          
          calculateFinalWeight(possibility, context) {
              let baseWeight = possibility.confidence || 0.5;
              let utilityWeight = possibility.utility || 0.5;
              let contextRelevance = this.assessContextRelevance(possibility, context);
              
              return (baseWeight * 0.4 + utilityWeight * 0.4 + contextRelevance * 0.2);
          }
      }
    `,

    "decision_materialization": `
      function materializeDecision(collapseResult, originalPossibilities) {
          let materializedDecision = {
              decision: collapseResult.selected,
              confidence: collapseResult.confidence,
              timestamp: Date.now(),
              
              // معلومات الانهيار
              collapseMethod: collapseResult.mechanism,
              alternativesConsidered: originalPossibilities.length,
              
              // الاحتمالات المقموعة
              suppressedAlternatives: originalPossibilities
                  .filter(p => p.id !== collapseResult.selected.id)
                  .map(p => ({
                      option: p,
                      suppressionReason: "lost_in_collapse",
                      recoveryDifficulty: calculateRecoveryDifficulty(p, collapseResult)
                  })),
              
              // إمكانية المراجعة
              reversibilityScore: calculateReversibility(collapseResult),
              
              // تأثيرات متوقعة
              expectedOutcomes: predictOutcomes(collapseResult.selected),
              
              // آثار جانبية
              sideEffects: {
                  cognitiveLoadReduction: "high",
                  flexibilityReduction: "moderate",
                  commitmentLevel: collapseResult.confidence,
                  regretPotential: calculateRegretPotential(collapseResult, originalPossibilities)
              }
          };
          
          // تحديث حالة النظام بعد الانهيار
          updateSystemStatePostCollapse(materializedDecision);
          
          return materializedDecision;
      }
    `
  },

  "post_collapse_effects": {
    "cognitive_relief": {
      "description": "تخفيف الحمل المعرفي بعد اتخاذ القرار",
      "mechanism": "uncertainty_reduction",
      "duration": "minutes_to_hours"
    },
    "alternative_suppression": {
      "description": "الخيارات الأخرى تصبح أصعب في التذكر",
      "mechanism": "memory_reorganization",
      "reversibility": "difficult"
    },
    "commitment_escalation": {
      "description": "زيادة الالتزام بالقرار المتخذ",
      "mechanism": "cognitive_dissonance_reduction",
      "strength": "proportional_to_confidence"
    },
    "regret_formation": {
      "description": "احتمالية تكوين ندم إذا ساءت النتائج",
      "factors": ["decision_quality", "outcome_controllability", "alternative_visibility"],
      "mitigation": "rationalization_processes"
    }
  },

  "failure_modes": {
    "analysis_paralysis": {
      "description": "عدم القدرة على الانهيار بسبب تساوي الخيارات",
      "symptoms": ["endless_comparison", "increased_anxiety", "deadline_missing"],
      "intervention": "force_collapse_with_random_selection"
    },
    "premature_collapse": {
      "description": "انهيار سريع جداً قبل تحليل كافي",
      "symptoms": ["low_confidence_decisions", "frequent_regret", "impulsivity"],
      "intervention": "increase_uncertainty_tolerance"
    },
    "collapse_failure": {
      "description": "فشل كامل في اتخاذ أي قرار",
      "symptoms": ["decision_avoidance", "procrastination", "delegation"],
      "intervention": "default_decision_activation"
    }
  },

  "applications": [
    "نمذجة عمليات اتخاذ القرارات تحت الضغط",
    "فهم آليات حل المشاكل المعقدة",
    "تطوير أنظمة دعم القرار الذكية",
    "تحليل نقاط التحول في الحياة",
    "فهم ديناميكيات الإبداع والابتكار"
  ],

  "limitations": [
    "لا يفسر التجربة الذاتية لاتخاذ القرار",
    "يبسط العمليات المعرفية المعقدة",
    "قد لا ينطبق على القرارات التدريجية",
    "يحتاج معايرة حسب نوع القرار والسياق"
  ],

  "meta": {
    "created": "2024",
    "author": "نموذج نظري محدث",
    "inspiration": "الفيزياء الكمومية + نظرية القرار + علم الأعصاب",
    "status": "نموذج نظري قابل للاختبار",
    "related_concepts": ["simulators", "oscillators", "noise-factor"]
  }
}